-- title:  Townsend
-- author: Andrew Gwozdziewycz
-- desc:   Get Work Done
-- script: lua

t = 0

-- number of tiles wifi can reach.
WIFI_RANGE = 10
WIFI_MAX_QUALITY = 3
CLOCK_TICKS_PER_HOUR = 3600
CLOCK_START_HOUR = 9
CLOCK_END_HOUR = 17

-- (MAX_SIGNAL - signal) * JOB_LOCKOUT_TICKS
JOB_LOCKOUT_TICKS = 60

-- Vertical space for top bar.
SCREEN_YOFFSET = 10

-- TODO: This should really not be global...
ACCESS_POINTS = {
   {x = 20, y = 2, alive = true},
   {x = 1, y = 13, alive = true},
}

sprites = {
   WIFI = 256,
   PLAYER = 304,
   COWORKER_1 = 444,
   COWORKER_2 = 444,

   JOB_WAIT = 272,
   JOB_LOCATION = 273,
   JOB_TIME = 274,
   JOB_OK = 275,
   JOB_NOTHING = 276,
   JOB_PREREQ = 277,
}

flags = {
   FLOOR = 0,
   WALL = 1,
   SEAT = 2
}

Actor = {
   STANDING = 1,
   SITTING = 2,
   TALKING = 3,

   -- these are placeholders for when sprites actually exist to do offsets from.
   LEFT = 10,
   RIGHT = 11,
   UP = 12,
   DOWN = 13,
}

kitchen_boundaries = {
   min_x = 32,
   min_y = 5,
   max_x = 47,
   max_y = 16,
}

kitchen_prep_boundaries = {
   min_x = 42,
   min_y = 6,
   max_x = 47,
   max_y = 12,
}

bathroom_boundaries = {
   min_x = 43,
   min_y = 27,
   max_x = 55,
   max_y = 31,
}

town_hall_boundaries = {
   min_x = 3,
   min_y = 16,
   max_x = 20,
   max_y = 25,
}

copier_boundaries = {
   min_x = 49,
   min_y = 16,
   max_x = 50,
   max_y = 20,
}

right_conference = {
   min_x = 53,
   min_y = 8,
   max_x = 58,
   max_y = 13,
}

lower_conference_1 = {
   min_x = 22,
   min_y = 20,
   max_x = 29,
   max_y = 25,
}

lower_conference_2 = {
   min_x = 31,
   min_y = 20,
   max_x = 37,
   max_y = 25,
}

lower_conference_3 = {
   min_x = 39,
   min_y = 20,
   max_x = 43,
   max_y = 25,
}

-- makes a shallow copy of a table, useful for copying job constraints.
function copy(t)
   n = {}
   for k,v in pairs(t) do
      n[k] = v
   end
   return n
end


function Actor:new(o)
   o = o or {
      x = 1, -- tile coordinates
      y = 1,
   }
   setmetatable(o, self)
   self.__index = self
   return o
end

Player = Actor:new()
function Player:new(x, y)
   o = {
      x = x,
      y = y,
      direction = self.LEFT,
      state = self.STANDING,
   }
   setmetatable(o, self)
   self.__index = self
   return o
end

function Player:can_work(t)
   -- Yes, there's a misnomer here. You're not sitting at the copier,
   -- but, most work is happening when seated, so that's the work state.
   return self.state == self.SITTING
end

function Player:draw()
   spr(sprites.PLAYER, 15 * 8, (8*8) + SCREEN_YOFFSET, 0)

--   spr(sprites.PLAYER, self.x * 8, SCREEN_YOFFSET + (self.y * 8), 0)
end

function Player:can_work(t)
   return self.state == self.SITTING
end

Coworker = Actor:new()
function Coworker:draw()
   circ(self.x, self.y, 5, 1)
end

HUD = {}
function HUD:new(clock, jobs, player)
   o = {
      jobs = jobs,
      clock = clock,
      player = player,
      signal = 0,
   }
   setmetatable(o, self)
   self.__index = self
   return o
end

function HUD:draw()
   -- draw the can work indicator.
   _, problem = self.jobs:work_problem(self.clock.time, self.player)
   spr(problem, 1, 1, 0)

   -- draw the jobs status.
   print(zeropad(#(self.jobs.completed)), 12, 2, 10)
   print("/", 24, 2, 11)
   print(zeropad(#(self.jobs.completed)+#(self.jobs.jobs)), 30, 2, 11)

   local perc = 0
   local desc = ""
   local current = self.jobs:current()
   if current then
      perc = current.progress / current.goal
      desc = current.desc
   end

   -- description
   print(desc, 45, 2, 11)

   -- progress bar.
   rectb(110, 1, 84, 8, 12)
   rect(112, 3, math.floor(perc * 80), 4, 6)

   -- draw the clock
   local hours = self.clock:hour()
   local minutes = self.clock:minute()

   local colon = ":"
   if (math.floor(time() / 1000) % 2) == 0 then
      colon = " "
   end

   print(zeropad(math.floor(hours)) .. colon .. zeropad(math.floor(minutes)), 200, 2, 11)

   -- draw the signal indicator.
   spr(sprites.WIFI+self.signal, 230, 1, 0)
end

function HUD:update_signal(s)
   self.signal = s
end

Jobs = {}
function Jobs:new()
   o = {
      jobs = {},
      index = 0,
      completed = {},
      expired = {}, -- some jobs must be completed within a given time.
      signal = 0,
   }
   setmetatable(o, self)
   self.__index = self
   return o
end

function Jobs:add(desc, magnitude, opts)
   job = {}
   opts = opts or {}
   for k, v in pairs(opts) do
      job[k] = v
   end
   job.desc = desc
   job.goal= magnitude
   job.progress = 0
   job.next_tick = 0
   table.insert(self.jobs, job)
   self.index = #self.jobs
end

function Jobs:current()
   return self.jobs[self.index]
end

-- rotates through the list of jobs.
function Jobs:next()
   self.index = self.index + 1
   if self.index > #self.jobs then
      self.index = 1
   end
end

-- TODO: Probably need to expire some jobs
function Jobs:work_problem(t, p)
   -- no jobs, can't work.
   if #(self.jobs) == 0 then
      return false, sprites.JOB_NOTHING
   end

   local job = self:current()
   if not job then
      return false, sprites.JOB_NOTHING
   end
      -- are we still locked out?
   if t < job.next_tick then
      return false, sprites.JOB_WAIT
   end

   -- now, can the job be performed by the player at this point?
   -- time restriction?
   if job.min_t and job.max_t and
   t < job.min_t and t > job.max_t then
      return false, sprites.JOB_TIME
   end

   if job.min_x and job.max_x and
      job.min_y and job.max_y and
      (p.x < job.min_x or p.x > job.max_x or
       p.y < job.min_y or p.y > job.max_y) then
         return false, sprites.JOB_LOCATION
   end

   -- a job may require another job to have been completed first.
   -- check the completed jobs to see if it's been done.
   if job.requires then
      for k, v in pairs(self.completed) do
         if v.desc == job.requires then
            return true, sprites.JOB_OK
         end
      end

      return false, sprites.JOB_PREREQ
   end

   return true, sprites.JOB_OK
end

-- estimated how long until work can happen? useful for the HUD.
function Jobs:can_work(t, p)
   local can, _ = self:work_problem(t, p)
   return can
end

function Jobs:work(t, p)
   if self:can_work(t, p) then
      self:current().progress = self:current().progress + 1
      if self:current().progress >= self:current().goal then
         self:complete()
      end

      -- compute the next work time based on the signal
      self:update_next_tick(t)
   end
end

function Jobs:complete()
   table.insert(self.completed, self.jobs[self.index])
   self.jobs[self.index] = nil

   -- copy all the remaining jobs into a new table
   local jobs = {}
   for _, v in pairs(self.jobs) do
      table.insert(jobs, v)
   end
   self.jobs = jobs
   self.index = #self.jobs
end

function Jobs:update_next_tick(t)
   local job = self:current()
   if not job then
      return
   end

   if job.no_wifi then
      job.next_tick = t + JOB_LOCKOUT_TICKS
      return
   end

   job.next_tick = t + ((WIFI_MAX_QUALITY + 1 - self.signal) * JOB_LOCKOUT_TICKS)
end

function Jobs:update_signal(s)
   self.signal = s
end

-- Clock is a drawn as HUD element, in the top of the screen.
Clock = {}
function Clock:new(ticks_per_hour, start_hour)
   o = {
      ticks_per_hour = ticks_per_hour,
      start_hour = start_hour,
      time = 0,
   }

   setmetatable(o, self)
   self.__index = self
   return o
end

-- Update is called once per non-paused frame.
function Clock:update(_t)
   self.time = self.time + 1
end

-- Number of hours that have passed
function Clock:hour()
   return (self.start_hour + (self.time / self.ticks_per_hour)) % 24
end

function Clock:minute()
   return (self.time % self.ticks_per_hour) / 60
end

function zeropad(x)
   x = math.floor(x)
   if x < 10 and x >= 0 then
      return "0" .. tostring(x)
   end
   return tostring(x)
end

function wifi_distance(aps, x, y)
   local best = 1000000
   for _, ap in ipairs(aps) do
      if ap.alive then
         local dx = ap.x - x
         local dy = ap.y - y

         if dx == 0 and dy == 0 then
            return 0
         end

         local d = math.sqrt(dx * dx + dy * dy)
         if d < best then
            best = d
         end
      end
   end

   if best == 1000000 then
      return -1
   end
   return best
end

function wifi_quality(d)
   local orig = d
   -- normalize it to based on the available range, and map to wifi strength
   if d > WIFI_RANGE then
      d = WIFI_RANGE
   end

   local norm = d / WIFI_RANGE

   if norm > .75 then
      return 0
   elseif norm > .5 then
         return 1
   elseif norm > .25 then
      return 2
   end

   return 3
end

-- Mode base
Mode = {}
function Mode:new()
   o = {}
   setmetatable(o, self)
   self.__index = self
   return o
end

function Mode:done()
   return false
end

function Mode:next()
   return TitleScreen:new()
end

function Mode:draw()
end

function Mode:update(button_state, t)
end

function Mode:draw_hud()
end


TitleScreen = Mode:new()
function TitleScreen:new()
   o = {
      blink = false,
      start = false,
   }
   setmetatable(o, self)
   self.__index = self
   return o
end

function TitleScreen:done()
   return self.start
end

function TitleScreen:draw()
   print("Townsend", 20, 20, 14)

   if self.blink then
      print("Press any key to start", 40, 40, 11)
   end
end

function TitleScreen:update(button_state, t)
   self.blink = (t % 60 < 30)
   if button_state.AP then
      self.start = true
   end
end

function TitleScreen:next()
   local clock = Clock:new(CLOCK_TICKS_PER_HOUR, CLOCK_START_HOUR)
   return Game:new(clock, ACCESS_POINTS)
end


-- Game
Game = Mode:new()
function Game:new(clock, aps)
   local jobs = Jobs:new()

   -- standard jobs.
   jobs:add("issue #542", 5)
   jobs:add("issue #547", 8, {requires = "issue #542"})

   local copier_opts = copy(copier_boundaries)
   copier_opts.no_wifi = true
   jobs:add("copy docs", 2, copier_opts)

   -- EATING

   -- TODO: time requirement
   local wash_opts = copy(bathroom_boundaries)
   wash_opts.no_wifi = true
   jobs:add("lunch wash", 1, wash_opts)

   -- TODO: time requirement
   local prep_opts = copy(kitchen_prep_boundaries)
   prep_opts.no_wifi = true
   prep_opts.requires = "lunch wash"
   jobs:add("lunch prep", 2, prep_opts)

   -- TODO: time requirement
   local lunch_opts = copy(kitchen_boundaries)
   lunch_opts.no_wifi = true
   lunch_opts.requires = "lunch prep"
   jobs:add("lunch", 4, lunch_opts)

   -- TODO: time requirement
   wash_opts = copy(bathroom_boundaries)
   wash_opts.no_wifi = true
   jobs:add("snack wash", 1, wash_opts)

   -- TODO: time requirement
   prep_opts = copy(kitchen_prep_boundaries)
   prep_opts.no_wifi = true
   prep_opts.requires = "snack wash"
   jobs:add("snack prep", 1, prep_opts)

   -- TODO: time requirement
   local snack_opts = copy(kitchen_boundaries)
   snack_opts.no_wifi = true
   snack_opts.requires = "snack prep"
   jobs:add("snack", 2, snack_opts)

   -- MEETINGS
   -- TODO: time requirement
   local th_opts = copy(town_hall_boundaries)
   th_opts.no_wifi = true
   jobs:add("town hall", 30, th_opts)


   local player = Player:new(2, 2)
   o = {
      player = player,
      jobs = jobs,
      clock = clock,
      aps = aps,
      hud = HUD:new(clock, jobs, player),
   }

   setmetatable(o, self)
   self.__index = self
   return o
end

function Game:update(button_state, t)
   -- if the clock is at CLOCK_END_HOUR, then... we've gotta prepare to be done.
   if self.clock:hour() == CLOCK_END_HOUR then
      -- prepare for game over.
   end

   self.clock:update(t)
   self:update_player(button_state, self.clock.time)

   -- Compute new signal strength
   signal = wifi_quality(wifi_distance(self.aps, self.player.x, self.player.y))
   self.hud:update_signal(signal)
   self.jobs:update_signal(signal)
end

function Game:update_player(button_state, t)
   -- if we're accepting input for work, check to see if there's an A button
   -- press... but only if we're sitting down.
   if self.player:can_work() then
      if self.jobs:can_work(self.clock.time, self.player) and button_state.A then
         self.jobs:work(self.clock.time, self.player)
      end
   end

   if button_state.BP then
      self.jobs:next()
      return
   end

   local x = self.player.x
   local y = self.player.y
   local newx = x
   local newy = y

   if button_state.LEFTP then
      newx = x - 1
   elseif button_state.RIGHTP then
      newx = x + 1
   elseif button_state.UPP then
      newy = y - 1
   elseif button_state.DOWNP then
      newy = y + 1
   end

   local iswall = fget(mget(newx, newy), flags.WALL)
   if not iswall then
      self.player.x = newx
      self.player.y = newy
   end

   local isseat = fget(mget(newx, newy), flags.SEAT)
   if isseat then
      self.player.state = Actor.SITTING
   else
      self.player.state = Actor.STANDING
   end
end

function Game:done()
end

function Game:next()
   if self.game_over then
      return ScoreCard:new(self.jobs)
   end
   return Credits:new()
end

function Game:draw()
   map(self.player.x-15, self.player.y-8, 28, 15, 0, SCREEN_YOFFSET)

   self.player:draw()
end

function Game:draw_hud()
   self.hud:draw()
end

ScoreCard = Mode:new()
function ScoreCard:new(jobs)
   o = {
      jobs = jobs,
      escaped = false,
   }
   setmetatable(o, self)
   self.__index = self
   return o
end

function ScoreCard:done()
   return self.escaped
end

function ScoreCard:update(button_state, t)
   if button_state.AP or button_state.BP then
      self.escaped = true
   end
end

function ScoreCard:draw()
   for i, j in pairs(self.jobs.jobs) do
      print("SCORE", 0, 0)
   end
end


credits_body = {
   "Game by APG",
   "Written by APG",
   "Graphics by APG",
   "Sound by APG",
   "Original concepts by APG",
   "",
   "With Special Thanks to Heroku",
   "     ... and Salesforce",
   "Alex Arnell",
   "Edward Muller",
   "Phil Hagelberg",
   "Peter Baker"
}


Credits = Mode:new()
function Credits:new()
   o = {
      lines = credits_body,
      y = 140,
      escaped = false,
   }

   setmetatable(o, self)
   self.__index = self
   return o
end

function Credits:done()
   return self.y > 200 or self.escaped
end

function Credits:update(button_state, t)
   self.y = self.y - .2
   if button_state.AP then
      self.escaped = true
   end
end

function Credits:draw()
   for i, line in ipairs(self.lines) do
      print(line, 20, math.floor(self.y) + (10 * i), 0)
      print(line, 19, math.floor(self.y)-1 + (10 * i), 5)
   end
end

-- Setup
mode = TitleScreen:new()

function OVR()
   if mode ~= nil then
      mode:draw_hud()
   end
end

function TIC()
   button_state = {
      UP = btn(0),
      UPP = btnp(0),
      DOWN = btn(1),
      DOWNP = btnp(1),
      LEFT = btn(2),
      LEFTP = btnp(2),
      RIGHT = btn(3),
      RIGHTP = btnp(3),
      A = btn(4),
      AP = btnp(4),
      B = btn(5),
      BP = btnp(5)
   }

   cls(0)
   mode:update(button_state, t)
   mode:draw()
   t=t+1

   if mode:done() then
      mode = mode:next()
   end
end




-- <TILES>
-- 001:0212121202121112021112110112121202121112021112110112121202121112
-- 002:0212121202121112021112110112121202121112021112110112121202121112
-- 003:0000000021221222111111112212212211111111122122121111111122122122
-- 004:00000000212212221fccaacc2fcacaac1fffffff1f6a6a661fd566ad22122122
-- 005:0000000021221222cbcfdacccbcfcc6affffffffd66fd666d66fdb6d22122122
-- 006:0000000022212212aabcbaf1bbccabf2fffffff1da6d2df1adaa6af122122122
-- 007:221222122777777117777772277cc771277c7772177777712777777217777771
-- 016:eedff0eeeedff0eeeedff0eeeedff0eeeedff0eeeedff0eeeedff0eeeedff0ee
-- 017:eeeeeeeeeeeeeeeeddddddddffffffffffffffff00000000eeeeeeeeeeeeeeee
-- 018:eeeeeeeeeeeeeeeeeeddddddeedfffffeedfffffeedff000eedff0eeeedff0ee
-- 019:eeeeeeeeeeeeeeeeddddd0eefffff0eefffff0ee000ff0eeeedff0eeeedff0ee
-- 020:eedff0eeeedff0eedddff0eefffff0eefffff0ee000000eeeeeeeeeeeeeeeeee
-- 021:eedff0eeeedff0eeeedff0ddeedfffffeedfffffeed00000eeeeeeeeeeeeeeee
-- 022:eeeeeeeeeeeeeeeeddddddddffffffffffffffff000ff000eedff0eeeedff0ee
-- 023:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeecc5ccc5c00000000
-- 024:eeeeeec0eeeeee50eeeeeec0eeeeeec0eeeeeec0eeeeee50eeeeeec0eeeeeec0
-- 025:0ceeeeee0ceeeeee05eeeeee0ceeeeee0ceeeeee0ceeeeee05eeeeee0ceeeeee
-- 032:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeedeeeeeeeeeeeeee
-- 033:efeeefeefeefeeeeeeeeefefefefeeeffdefefeeeefeeefeeeeeefeffefefefe
-- 034:ddddddddddddddedddddddddddddddddddddeddddddddddeddddddedddeddedd
-- 035:dddddddddddeddedddddddddddddddddddddeddddddddddedddeddddddeddedd
-- 036:88888888888888d888888888888888888888d8888888888e888888d888d88e88
-- 037:88888888888e88d888888888888888888888d8888888888e888d888888d88e88
-- 038:88888888888888d88888888800000000eeeeeeee00000000888888d888d88e88
-- 048:efffffffefdd23dfefd322dfefd226dfefdd56dfefd265dfefdddaafefffffff
-- 049:efffffffef00000fef9dddefefededefef9dddefefecccefefffffffefffffff
-- 050:ed0ddddded0dedcded0ddddded0ddddded0ddddded0ddddded0dededed0ddddd
-- 064:eeeeeeeeefffffffefffffffefffffffefffffffefffffffefffffffefffffff
-- 065:efffffffefffffffefffffffefffffffefffffffefffffffefffffffefffffff
-- 066:ef66ffffef66e3cfeffff33fefffffffef77f44fef77ff4fefffefefefffffff
-- 067:fffffffffffffddfffccffffffccfddffffffffffffffccffffffcefffffffff
-- 080:d4444444d4444444d4444444d4444444d4444444d4444444d4444444d4444444
-- 081:44444444444444444444444444444444444444444444444444444444ffffffff
-- 082:dddddddd44444444444444444444444444444444444444444444444444444444
-- 083:4444444f4444444f4444444f4444444f4444444f4444444f4444444f4444444f
-- 084:ddddddddd4444444d4444444d4444444d4444444d4444444d4444444d4444444
-- 085:4444444f4444444f4444444f4444444f4444444f4444444f4444444fffffffff
-- 086:d4444444d4444444d4444444d4444444d4444444d4444444d4444444ffffffff
-- 087:dddddddf4444444f4444444f4444444f4444444f4444444f4444444f4444444f
-- 096:4444444444444444444444444444444444444444444444444444444444444444
-- 097:4444447f4404444f4f048e4f4f04ee4f4f04e84f4f048e4f4404444f4444444f
-- 098:d4444444d4444044d4e840f4d48e40f4d4ee40f4d4e840f4d4444044d7444444
-- 099:dddddddd7444444444ee8e44448ee844444444444000000444ffff4444444444
-- 100:4444444444ffff444000000444444444448ee84444e8ee4444444447ffffffff
-- 101:4444444447456444442267446657527442175244426512444422264444444444
-- 102:4444444444ffff4444feef4444ffef4444ffef4444fccf4444ffff4444444444
-- 103:dddddddd44ffff4444feef4444ffef4444ffef4444fccf4444ffff4444444444
-- 112:eeeeeeeeeeffffeeefddddfeee0000eeef0000feef0000feeeeeeeeeeeeeeeee
-- 113:eeeeeeeeeeeeeeeeef0000feef0000feee0000eeefddddfeeeffffeeeeeeeeee
-- 114:eeeeeeeeeeffefeeee000dfeee000dfeee000dfeee000dfeeeffefeeeeeeeeee
-- 115:eeeeeeeeeefeffeeefd000eeefd000eeefd000eeefd000eeeefeffeeeeeeeeee
-- 128:ddddddddddffffdddfddddfddd0000dddf0000fddf0000fddddddddddddddddd
-- 129:dddddddddddddddddf0000fddf0000fddd0000dddfddddfdddffffdddddddddd
-- 130:ddddddddddffdfdddd000dfddd000dfddd000dfddd000dfdddffdfdddddddddd
-- 131:ddddddddddfdffdddfd000dddfd000dddfd000dddfd000ddddfdffdddddddddd
-- 144:888ecce888888888cc8ccc88cdccccc8cdcaadcccdcaadcccdccccc8cc8ccc88
-- 160:22222222211111111111111118811111181111111811111118111111ffffffff
-- 161:22222222911111119111111118888881111111819111118191111181ffffffff
-- 162:22222222188888121111181211111812111118121111181212222812ffffffff
-- 192:8cccccdd8ccc055d0ccc033d0de00edd0ccf0edddccf0edddddddfff88888888
-- 193:8888888888868888888888888288883888888888888888828888888888883888
-- 224:eeed2deeeed222deed22c222d22ccc2fe222c2feee222feeeee2feeeeeeeeeee
-- 240:eeeeeeeee6e56eeeee6655eee636366eee7576eee65377eeee6656eeeeeeeeee
-- 241:eeeeeeeee7e56eeeee2267ee6657527ee21752eee26512eeee2226eeeeeeeeee
-- 242:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeaa9dd0eea99de0eea99d00eeeeeeeee
-- 243:eeeeeeeeeaaaeeeee99aeeeee999eeeeedddeeeee0edeeeee000eeeeeeeeeeee
-- 244:ddddddddda99d00dda99de0ddaa9dd0ddddddddddddddddddddddddddddddddd
-- </TILES>

-- <SPRITES>
-- 000:00000000000000000000000000000000000000000000000022f0000022f00000
-- 001:0000000000000000000000000000000033f00000003f000033f3f00033f3f000
-- 002:0000000000000000444f00000004f00044f04f00004f04f044f4f4f044f4f4f0
-- 003:5555000000005000555f05000005f05055f05f05005f05f555f5f5f555f5f5f5
-- 016:0cccccc001c11c1000c44c00001cc100000cc00000c14c0000c44c000cccccc0
-- 017:0003000000023000000223000002110020010002100000010000000000020000
-- 018:00022000022c1220021001202100c012200c0003120000310220033001123110
-- 019:00066000066cc66006cffc6066c66c6666cccc6616cffc6106c66c6001166110
-- 021:0022200002111200212001202012002020012020120012100122210000111000
-- 048:0022200000444000004300000466640004666400049994000090900000909000
-- </SPRITES>

-- <MAP>
-- 000:203040506030405060304050603040506030405060304050603040506030405060303030304050603030304050603030303040506030405060303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:200202020202020205063502020205063502020202020506350202020202020202020202020202020202020202020202020202020202020202020f20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:201212121202023726061627023726061627020202372606162702020202020202020202020202020202020202020202020202020202020202020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:2091122a12020202056635020202055635020202020205663502020202020202020202020202020202020202020202020202020202120a0a1a120220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:2091121212020237260616270237260616270202020205061627020202020202020202020202020202020202020202020202020202121212122a0220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:2091122a12020202055635020202050635020202023726063502020202020202222222222222222222222222222222042002020202121212122a0220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:209112121202023726061627023726061627020202020506162702020202020222457528223845752222323232323213200202020202020202020f20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:2091122a1202020205563502020205663502020202020556350202020202020238053522222205352822320314323214200202022111111111111120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:201212121202023726061627023726061627020202372606162702020202020222053528223805352222320334323223200202020102020202020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:200202020202020265155502020265155502020202026515550202020202020238053522222205352822320334323223200202020102020702070220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:200202020202020202020202020202020202020202020202020202020202020222053528223805352222320324323214200202020202452525252520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:200202020202020202020202020202020202020202020202020202020202020238053522222205352822320314323224200202020202651515151520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:200202020202020202020202020202020202020202020202020202020202020222053528223805352222324f4f323214200202020102021702170220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:20020202020202020202020202020202020202020202020202020202020202023805352222220535282222222208322420020202011f717171712f20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:20020202020202020202020202020202020202020202020202020202020202022205352822380535222222384575224f200202025111111111111120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:200202020202020202020202020202020202020202020202020202020202020238655522222265552822222265552822203f02020245257625252520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:200202121212121212121212121212121212120202020202020202020202020222222222222222222222222218222222200c1c020265461515461520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 017:200202120a1a1a12120a1a1a12120a1a1a12120202020202020202020202020202020202020202020202020202020202200c1c020202170202170220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 018:200202121212121212121212121212121212120202020202020202020202020202020202020202020202020202020202200c1c020202020202020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 019:200202121212121212121212121212121212122a02211102021111111111611102021111111161110202111131020202200c1c020202020202020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 020:200202120a1a1a12120a1a1a12120a1a1a12120202013f0202020202021f013f02020202020f011f0202028101020202200c1c020245252576252520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 021:200202121212121212121212121212121212122a02010207020702070202010202070207020201020207028101020202020202020265461515461520000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 022:200202120812081212081208121208120812120202010245252525257502010245252525750201024525758101020202020202020202170202170220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 023:200202121212121212121212121212121212122a02010265151515155502010265151515550201026515558101020202020202020202020202020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 024:2002020202020202020202020202020e0202020202010217021702170202010202170217020201020217028101020202020202020202020202020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 025:200202021f7171717171717171717102021f0202020171717171717171710171717171717171012f0202020201020202020202020202020202020220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 026:203030303030303030303030303030303030303030303030303030303030303030303030302030303030303030303070303030303030703030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 027:000000000000000000000000000000000000000000000000000000000000000000000000000000000000100942424242141009424242421410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 028:000000000000000000000000000000000000000000000000000000000000000000000000000000000000104242424252131042424242521310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 029:000000000000000000000000000000000000000000000000000000000000000000000000000000000000106262624242141062626242421410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 030:000000000000000000000000000000000000000000000000000000000000000000000000000000000000100942424252131009424242521310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 031:000000000000000000000000000000000000000000000000000000000000000000000000000000000000104242424242141042424242421410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 032:000000000000000000000000000000000000000000000000000000000000000000000000000000000000303030303030303030303030303030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
-- </SFX>

-- <FLAGS>

-- </FLAGS>

-- <PALETTE>
-- 000:1a1c2c5d275db13e53ef7d57ffca89a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57
-- </PALETTE>
